from algorithm.constructive import Constructive
from model.classes import Engine
from model.problem import Problem
from model.solution import Solution
from .move import Move
from typing import Optional, List, Tuple
import random


class Switch(Move):
    """This class represents a Switch Move. A neighbor in the Switch Move 
    structure is generated by switching the order of two jobs of a machine. 
    """

    def __init__(
        self: 'Switch', 
        problem: Problem, 
        constructive: Constructive
    ):
        """Instantiates a new Switch Move.

        Args:
            problem (Problem): The problem reference.
            constructive (Constructive): The move constructive procedure.
        """

        super().__init__(problem, constructive, 'Switch')

        self._engine: Engine = random.choice(problem.engines)

        self._job_1: Optional[int] = None
        self._job_2: Optional[int] = None        

    def accept(self: 'Switch') -> None:
        """This method must be called whenever the modification made by 
        this move is accepted. It ensures that the solution as well as 
        other structures are updated accordingly.
        """

        super().accept()

    def reject(self: 'Switch') -> None:
        """This method must be called whenever the modification made by 
        this move are rejected. It ensures that the solution as well as 
        other structures are updated accordingly.
        """

        super().reject()

        route: List[Tuple[int, str]] = \
            self._current_solution.routes[self._engine.id - 1]

        route[self._job_1], route[self._job_2] = \
            route[self._job_2], route[self._job_1]

        self._constructive.run(True)

    def do_move(self: 'Switch', solution: Solution) -> float:
        """This method returns does the move and returns the impact 
        (delta cost) in the solution.
    
        Args:
            solution (Solution): The solution to be modified.

        Returns:
            int: The impact (delta cost) of this move in the solution.
        """

        route: List[Tuple[int, str]] = \
            solution.routes[self._engine.id - 1]

        self._job_1, self._job_2 = [
            tuple(i)[0] for i in random.sample(list(enumerate(route)), 2)
        ]

        route[self._job_1], route[self._job_2] = \
            route[self._job_2], route[self._job_1]

        return super().do_move(solution)

    def gen_move(self: 'Switch', solution: Solution) -> None:
        """This method generates a random candidate for the movement that must 
        be subsequently validated by has_move ().
        
        Args:
            solution (Solution): The solution to be modified.
        """

        # resets the current neighborhood so that new ones can be explored
        self.reset()

        for _ in range(int(1e3)):
            self._engine = random.choice(self._problem.engines)
            if self.has_move(solution): break

    def has_move(self: 'Switch', solution: Solution) -> bool:
        """This method returns a boolean indicating whether this neighborhood 
        can be applied to the current solution.
        
        Returns:
            bool: True if this neighborhood can be applied to the current 
                solution, False otherwise.
        """

        return len(solution.routes[self._engine.id - 1]) > 1

    def reset(self: 'Switch') -> None:
        """This method is called whenever the neighborhood should be reset 
        (mainly to avoid the need of creating another object).
        """

        self._engine = random.choice(self._problem.engines)
        
        self._job_1 = None
        self._job_2 = None

    # region simple getters and setters
    @property
    def engine(self: 'Switch') -> Engine:
        """Engine: The engine reference."""
        return self._engine

    @engine.setter
    def engine(self: 'Switch', value: Engine) -> None:
        self._engine = value

    @property
    def job_1(self: 'Switch') -> Optional[int]:
        """Optional[int]: The index of the first job."""
        return self._job_1

    @job_1.setter
    def job_1(self: 'Switch', value: Optional[int]) -> None:
        self._job_1 = value

    @property
    def job_2(self: 'Switch') -> Optional[int]:
        """Optional[int]: The index of the second job."""
        return self._job_2

    @job_2.setter
    def job_2(self: 'Switch', value: Optional[int]) -> None:
        self._job_2 = value
